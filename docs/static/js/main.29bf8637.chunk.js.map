{"version":3,"sources":["assets/images/loading.svg","utils/getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","getWeb3","Promise","resolve","reject","window","addEventListener","Object","asyncToGenerator","regenerator_default","a","mark","_callee","results","web3","ethereum","provider","wrap","_context","prev","next","Web3","enable","console","log","t0","currentProvider","providers","HttpProvider","stop","this","contract","require","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","lastWinner","numberOfBets","minimumBet","totalBet","maxAmountOfBets","pending","betResults","initialState","_this2","then","setState","setupContracts","catch","setupListeners","_this3","huanCasinoContract","HuanCasino","setProvider","deployed","instance","casinoInstance","fetchAccounts","updateGameInfos","error","alert","_this4","_this$state","result","parseFloat","utils","fromWei","toString","parseInt","numberWinner","_this5","_this$state2","eth","getAccounts","accounts","owner","contractOwner","_this6","refs","numbers","querySelectorAll","forEach","number","event","target","className","voteNumber","innerHTML","liNodes","i","length","Won","watch","err","_this7","args","_address","toLocaleLowerCase","filter","item","blockNumber","push","bet","value","callbackVoteNumber","gas","from","toWei","_this8","watchResultBet","e","message","wei","withdraw","_this$state5","undefined","_this9","_this$state6","react_default","createElement","AppBar_default","position","Toolbar_default","Typography_default","variant","checkOwner","type","onClick","ref","placeholder","src","width","alt","style","color","map","key","_status","parseWeiToEth","_amount","React","Component","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.29bf8637.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.9e315665.svg\";","import Web3 from 'web3'\n\nlet getWeb3 = new Promise(function (resolve, reject) {\n  // Wait for loading completion to avoid race conditions with web3 injection timing.\n  window.addEventListener('load', async function () {\n    var results\n    var web3 = window.web3\n    var ethereum = window.ethereum\n\n    // Checking if Web3 has been injected by the browser (Mist/MetaMask)\n    if (typeof ethereum !== 'undefined') {\n      web3 = new Web3(ethereum)\n      try {\n        // Request account access if needed\n        await ethereum.enable()\n        results = { web3: web3 }\n\n        console.log('Injected web3 (ethereum) detected.')\n      } catch (error) {\n        // User denied account access...\n        console.log('User not allowed access to web3!', error)\n      }\n    } else if (typeof web3 !== 'undefined') {\n      // Use Mist/MetaMask's provider.\n      web3 = new Web3(web3.currentProvider)\n\n      results = { web3: web3 }\n\n      console.log('Injected web3 (default) detected.')\n    } else {\n      // Fallback to localhost if no web3 injection. We've configured this to\n      // use the development console's port by default.\n      var provider = new Web3.providers.HttpProvider('http://127.0.0.1:8545')\n\n      web3 = new Web3(provider)\n\n      results = { web3: web3 }\n\n      console.log('No web3 instance injected, using Local web3.')\n    }\n\n    resolve(results)\n  })\n})\n\nexport default getWeb3\n","import React from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\n\nimport getWeb3 from './utils/getWeb3'\nimport HuanCasino from './contracts/HuanCasino.json'\n\nconst contract = require('truffle-contract')\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      web3: null,\n      lastWinner: 0,\n      numberOfBets: 0,\n      minimumBet: 0,\n      totalBet: 0,\n      maxAmountOfBets: null,\n      pending: false,\n      betResults: []\n    }\n\n    window.initialState = this.state\n  }\n\n  componentDidMount() {\n    // Get network provider and web3 instance\n    // Setup contracts once web3 is available\n\n    getWeb3\n      .then(results => {\n        this.setState({\n          web3: results.web3\n        });\n        this.setupContracts();\n      })\n      .catch(() => {\n        console.log(\"Error finding web3.\");\n      });\n\n\n    this.setupListeners()\n\n    // setInterval(this.updateState.bind(this), 7e3)\n  }\n\n  setupContracts() {\n    const { web3 } = this.state\n    let huanCasinoContract = contract(HuanCasino)\n    huanCasinoContract.setProvider(web3.currentProvider)\n    huanCasinoContract.deployed().then(instance => {\n      const casinoInstance = instance\n      this.setState({ casinoInstance })\n      this.fetchAccounts()\n      this.updateGameInfos()\n    }).catch(error => {\n      alert('Setup smart contract failure!')\n      console.log(error)\n    })\n  }\n\n  updateGameInfos() {\n    const { web3, casinoInstance } = this.state\n\n    casinoInstance.minimumBet().then((result) => {\n      if (result != null) {\n        this.setState({\n          minimumBet: parseFloat(web3.utils.fromWei(result.toString(), 'ether'))\n        })\n      }\n    })\n    casinoInstance.totalBet().then((result) => {\n      if (result != null) {\n        this.setState({\n          totalBet: parseFloat(web3.utils.fromWei(result.toString(), 'ether'))\n        })\n      }\n    })\n    casinoInstance.numberOfBets().then((result) => {\n      if (result != null) {\n        this.setState({\n          numberOfBets: parseInt(result.toString())\n        })\n      }\n    })\n    casinoInstance.numberWinner().then((result) => {\n      if (result != null) {\n        this.setState({\n          lastWinner: parseInt(result.toString())\n        })\n      }\n    })\n  }\n\n  fetchAccounts() {\n    const { web3, casinoInstance } = this.state\n\n    web3.eth.getAccounts((error, accounts) =>\n      this.setState({ accounts })\n    )\n\n    casinoInstance.owner().then(result => {\n      this.setState({ contractOwner: result })\n    })\n  }\n  // Listen for events and executes the voteNumber method\n  setupListeners() {\n    let liNodes = this.refs.numbers.querySelectorAll('li')\n    liNodes.forEach(number => {\n      number.addEventListener('click', event => {\n        event.target.className = 'number-selected'\n        this.voteNumber(parseInt(event.target.innerHTML))\n      })\n    })\n  }\n\n  callbackVoteNumber() {\n    let liNodes = this.refs.numbers.querySelectorAll('li')\n    // Remove the other number selected\n    for (let i = 0; i < liNodes.length; i++) {\n      liNodes[i].className = ''\n    }\n  }\n\n  async watchResultBet() {\n    const {\n      casinoInstance,\n      betResults,\n      accounts\n    } = this.state\n    const wonEvent = casinoInstance.Won();\n    wonEvent.watch((err, result) => {\n      console.log('ERROR: ', err)\n      console.log('RESULT: ', result)\n      if (err) {\n        alert('Something wrong !!!, please try again later !')\n        console.log('could not get event Won()')\n        this.setState({ pending: false })\n      } else {\n        let resultAddress = result.args._address.toString().toLocaleLowerCase()\n        let localAddress = accounts[0].toString().toLocaleLowerCase()\n        if (resultAddress === localAddress) {\n          let checkExits = betResults.filter((item) =>\n            item.blockNumber === result.blockNumber\n          )\n          if (checkExits.length === 0)\n            betResults.push(result)\n            this.setState({ betResults })\n            this.setState({ pending: false })\n        }\n      }\n      this.updateGameInfos()\n    })\n  }\n\n  async voteNumber(number) {\n    let bet = this.refs['ether-bet'].value\n    const {\n      web3,\n      casinoInstance,\n      minimumBet\n    } = this.state\n    if (!bet) bet = 0.1\n\n    if (parseFloat(bet) < minimumBet) {\n      alert('You must bet more than the minimum')\n      this.callbackVoteNumber()\n    } else {\n      this.setState({ pending: true })\n      await casinoInstance.bet(number, {\n        gas: 300000,\n        from: this.state.accounts[0],\n        value: web3.utils.toWei(bet.toString(), 'ether')\n      }).then(result => {\n        if (result)\n          this.watchResultBet()\n      }).catch(e => {\n        this.setState({ pending: false })\n        alert('Vote number error! Please check again.')\n        console.log(e.message)\n      })\n      this.updateGameInfos()\n      this.callbackVoteNumber()\n    }\n  }\n\n  parseWeiToEth(wei) {\n    const { web3 } = this.state\n    let result = wei ? web3.utils.fromWei(wei.toString(), 'ether') : 0\n    return parseFloat(result)\n  }\n\n  withdraw() {\n    const { casinoInstance } = this.state\n    casinoInstance.withdraw({\n      gas: 300000,\n      from: this.state.accounts[0]\n    }).then(result => {\n      alert('Withdraw success!!')\n    }).catch(e => {\n      alert('You can not withdraw money from this game!')\n    })\n  }\n\n  checkOwner() {\n    const { contractOwner, accounts } = this.state\n    if (contractOwner !== undefined && accounts !== undefined) {\n      if (accounts[0] == undefined) return false\n      return (accounts[0].toLocaleLowerCase() === contractOwner.toLocaleLowerCase())\n    } else {\n      return false\n    }\n  }\n\n  render() {\n    const { pending, betResults } = this.state\n\n    return (\n      <div className=\"main-container\">\n        <AppBar position='static'>\n          <Toolbar className=\"toolBar\">\n            <Typography variant=\"h4\" className=\"toolBarText\">\n              ZeroS Dice - The destiny is in your hand\n            </Typography>\n          </Toolbar>\n        </AppBar>\n\n        <div className=\"main-container-content\">\n          <h1>Bet for your best number and win huge amounts of Ether</h1>\n          <div className=\"block\">\n            <b>Number of bets:</b> &nbsp;\n            <span>{this.state.numberOfBets}</span>\n          </div>\n          <div className=\"block\">\n            <b>Last number winner:</b> &nbsp;\n            <span>{this.state.lastWinner}</span>\n          </div>\n          <div className=\"block\">\n            <b>Total ether bet:</b> &nbsp;\n            <span>{this.state.totalBet} ether</span>\n          </div>\n          <div className=\"block\">\n            <b>Minimum bet:</b> &nbsp;\n            <span>{this.state.minimumBet} ether</span>\n          </div>\n          <div className=\"block\">\n            <b>Max amount of bets:</b> &nbsp;\n            <span>{this.state.maxAmountOfBets || 'Unlimited'}</span>\n          </div>\n          {this.checkOwner() &&\n            <p>\n              <button type='button' onClick={() => this.withdraw()}>Withdraw</button>\n            </p>\n          }\n          <hr/>\n          <h2>Vote for the next number</h2>\n          <label>\n          <b>How much Ether do you want to bet? <input className=\"bet-input\" ref=\"ether-bet\" type=\"number\" placeholder={this.state.minimumBet}/></b> ether\n          <br/>\n          </label>\n          <ul ref=\"numbers\" className=\"numberList\">\n            <li>1</li>\n            <li>2</li>\n            <li>3</li>\n            <li>4</li>\n            <li>5</li>\n            <li>6</li>\n            <li>7</li>\n            <li>8</li>\n            <li>9</li>\n            <li>10</li>\n          </ul>\n        </div>\n        <div className='container-bet-result'>\n          {pending &&\n            <div>\n              <p>\n                <img src={require('./assets/images/loading.svg')} width='70px' alt='loading' />\n              </p>\n              <span className='bet-edge-house' style={{color: '#d1ffe6'}}>Waiting for another bet of edge house......</span>\n            </div>\n          }\n          {betResults.length > 0 &&\n            <div>\n              <h2>Result:</h2>\n              {betResults.map((result, key) =>\n                <div className='bet-result' key={key}>\n                  <p>{result.args._status ? 'YOU WON' : 'YOU LOSE'}</p>\n                  <p>Won amount: {this.parseWeiToEth(result.args._amount)} ether.</p>\n                </div>\n              )}\n            </div>\n          }\n        </div>\n      </div>\n    )\n  }\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}